// here's all you need to do to run the hacky whacky
// 
// Make sure you turned off precompiled headers by going
// into Project --> (project name) Properties... -->
// set "Configuration:" at the top left to "All Configuration".
// go to C/C++ --> Precompiled Headers --> set the first one to
// "Not Using Precompiled Headers", and click Apply.
// 
// While it's on "All Configuration", do this too:
// go to C/C++ --> Preprocessor --> Preprocessor Definitions -->
// add this to the beginning:
// _CRT_SECURE_NO_WARNINGS;
// 
// hit return and click Apply.
// 
#include <Windows.h>
#include <string>
#include <vector>
#include <iostream>

// if you didnt include the Lua API
// just copy n paste the "Lua_API" folder
// on my github into the project
extern "C" {
	#include "Lua_API/lualib.h"
	#include "Lua_API/lua.h"
	#include "Lua_API/lapi.h"
	#include "Lua_API/lauxlib.h"
}

// I'll just blurt these out here cause
// im not gonna include my auto-updater ;p

#define addr_r_getfield		0x8516E0
#define conv_r_getfield		__cdecl
#define addr_r_pushlstring	0x852AD0
#define conv_r_pushlstring	__cdecl
#define addr_r_newthread	0x852350
#define addr_r_pcall		0x852680
#define addr_r_spawn		0x8342A0
#define addr_r_deserialize	0xBDE6B0
#define addr_rakpeer_hook	0xF04A2E


typedef void(conv_r_getfield* T_r_getfield)(int, int, const char*);
T_r_getfield r_getfield;
typedef void(conv_r_pushlstring* T_r_pushlstring)(int, const char*, int);
T_r_pushlstring r_pushlstring;
typedef int(__cdecl* T_r_newthread)(int);
T_r_newthread r_newthread;
typedef void(__cdecl* T_r_pcall)(int, int, int, int);
T_r_pcall r_pcall;
typedef int(__cdecl *T_r_deserialize)(int, const char*, const char*, size_t);
T_r_deserialize r_deserialize;
typedef void(__cdecl* T_r_spawn)(int);
T_r_spawn r_spawn;

int rakpeer_hook_jmpback = 0;
int rakpeer_hook_loc = 0;
int replicator = 0;
int game = 0;
int script_context = 0;

lua_State* L;

void r_loadstring(int rL, std::string source) {
	// dump vanilla bytecode
	luaL_loadbuffer(L, source.c_str(), source.length(), "=r_script");

	lua_getglobal(L, "string");
	lua_getfield(L, -1, "dump");
	lua_pushvalue(L, -3);
	lua_pcall(L, 1, 1, 0);
	lua_setglobal(L, "buffer");
	lua_pop(L, 1);

	lua_getglobal(L, "string");
	lua_getfield(L, -1, "len");
	lua_getglobal(L, "buffer");
	lua_pcall(L, 1, 1, 0);
	size_t size = lua_tointeger(L, -1);
	lua_pop(L, 1);
	printf("Size of buffer: %i.\n", size);

	lua_getglobal(L, "buffer");
	uint8_t* code = new uint8_t[size];
	memcpy(code, lua_tolstring(L, -1, &size), size);
	lua_pop(L, 1);
	
	// rerubi converts vanilla bytecode to roblox lua
	// instructions, and does this on their VM.
	// this means it's really sexy compared to most
	// executors! :-)/.
	r_getfield(rL, -10002, "rerubi");
	r_pushlstring(rL, (const char*)code, size);
	r_pcall(rL, 1, 0, 0);

	free(code);
}

// for lua state scan this aob: "B9000000000F45CA"
// in cheat engine, and read on:
int get_lua_state(int script_context_addr) {
	__asm {
		push esi
		mov esi, script_context_addr
		push ecx
		push edx
		mov ecx,0
		mov edx,1
		// lua state start (copy the instructions starting at "lea . . ." and stop at "push esi")
		// add 0x before all values
		lea eax, [ecx * 0x8 + 0x00000000]
		sub eax, ecx
		lea esi, [esi + eax * 0x8]
		add esi, 0x000000AC
		sub esi, [esi]
		// lua state end
		pop edx
		pop ecx
		mov eax,esi
		pop esi
	}
}

namespace retcheck {
	union func_data {
		int address;
		int size;
	};

	std::vector<func_data> functions;

	int patch(int func_start) {
		int func_end = func_start + 3;
		while (!(*(uint16_t*)func_end == 35669 && *(uint8_t*)(func_end + 2) == 236)) {
			func_end++;
		}

		int func_size = func_end - func_start;
		int retcheck_at = func_start;

		uint8_t check[8];
		while (retcheck_at < func_end) {
			memcpy(&check, reinterpret_cast<void*>(retcheck_at), 8);
			// find retcheck signature
			if (check[0] == 0x72 && check[2] == 0xA1 && check[7] == 0x8B) {
				retcheck_at = retcheck_at - func_start;
				break;
			}
			retcheck_at++;
		}

		if (retcheck_at == 0) {
			return func_start;
		}
		else {
			// if there is retcheck . . .
			func_size = func_end - func_start;
			int func = reinterpret_cast<int>(VirtualAlloc(nullptr, func_size, 0x1000 | 0x2000, 0x40));
			int jmpstart = func + retcheck_at + 2;
			int newjmpdist = 0;

			uint8_t* data = new uint8_t[func_size];
			memcpy(data, reinterpret_cast<void*>(func_start), func_size);

			int i = 0;
			while (i < func_size) {
				// Fix relative calls
				if (data[i] == 0xE8) {
					int oldrel = *(int*)(func_start + i + 1);
					int relfunc = (func_start + i + oldrel) + 5;

					if (relfunc % 0x10 == 0) {
						int newrel = relfunc - (func + i + 5);
						*(int*)(data + i + 1) = newrel;
						i += 4;
					}
				}
				i++;
			}

			// jump to the epilogue
			data[retcheck_at] = 0xEB;

			// write modified bytes to our new function
			memcpy(reinterpret_cast<void*>(func), data, func_size);
			delete[] data;

			// store information about this de-retcheck'd function
			func_data rdata;
			rdata.address = func;
			rdata.size = func_size;
			functions.push_back(rdata);

			return func;
		}
	}

	// clean up retcheck functions
	void flush() {
		for (size_t i = 0; i < functions.size(); i++) {
			VirtualFree(reinterpret_cast<void*>(functions.at(i).address), functions.at(i).size, MEM_RELEASE);
		}
	}
}

const char c_ref1[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
const int c_ref2[16]  = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15};

// stringstreams are for gay married couples like customality!!!!!!!!!!!
uint8_t to_hex(char* x) {
	if (lstrlenA(x) != 2) return 0;
	uint8_t b = 0;
	for (int i = 0; i < 16; i++) {
		if (x[0] == c_ref1[i]) b += c_ref2[i] * 16;
		if (x[1] == c_ref1[i]) b += i;
	}
	return b;
}

int aslr(int addr) {
	__asm {
		push ebx;
		mov ebx, fs:[0x30];
		mov ebx, [ebx + 8];
		mov eax, addr;
		add eax, ebx;
		sub eax, 0x00400000
		pop ebx;
	}
}

int __declspec(naked) rakpeer_hook() {
	__asm {
		mov replicator,ecx
		push ebx
		push esi
		mov esi,ecx
		push edi
		jmp [rakpeer_hook_jmpback]
	}
}

std::string getClass(int i) {
	return std::string((const char*)(*(int(**)(void))(*(DWORD*)i + 16))());
}

std::vector<int>getChildren(int i) {
	std::vector<int> children;
	int children_start = *(int*)(i + 48);
	int children_end = *(int*)(children_start + 4);
	for (int j = *(int*)(children_start); j != children_end; j += 8)
		children.push_back(*(int*)j);
	return children;
}

int findFirstClass(int i, std::string classname) {
	for (int v : getChildren(i))
		if (getClass(v).find(classname) != std::string::npos)
			return v;
	return 0;
}

void load_addresses() {
	r_getfield			= reinterpret_cast<T_r_getfield>(retcheck::patch(aslr(addr_r_getfield)));
	r_pushlstring		= reinterpret_cast<T_r_pushlstring>(retcheck::patch(aslr(addr_r_pushlstring)));
	r_newthread			= reinterpret_cast<T_r_newthread>(retcheck::patch(aslr(addr_r_newthread)));
	r_pcall				= reinterpret_cast<T_r_pcall>(retcheck::patch(aslr(addr_r_pcall)));
	r_spawn				= reinterpret_cast<T_r_spawn>(aslr(addr_r_spawn));
	r_deserialize		= reinterpret_cast<T_r_deserialize>(aslr(addr_r_deserialize));
	rakpeer_hook_loc	= aslr(addr_rakpeer_hook);
	rakpeer_hook_jmpback= rakpeer_hook_loc + 5;

	DWORD old = 0;
	VirtualProtect(reinterpret_cast<void*>(rakpeer_hook_loc), 5, 0x40, &old);
	int rel = (int)rakpeer_hook - (rakpeer_hook_loc + 5);
	*(uint8_t*)rakpeer_hook_loc = 0xE8;
	*(int*)(rakpeer_hook_loc + 1) = rel;
	VirtualProtect(reinterpret_cast<void*>(rakpeer_hook_loc), 5, old, &old);

	while (replicator == 0) Sleep(1);

	VirtualProtect(reinterpret_cast<void*>(rakpeer_hook_loc), 5, 0x40, &old);
	*(uint8_t*)rakpeer_hook_loc = 0x53;
	*(int*)(rakpeer_hook_loc + 1) = 0x57F18B56;
	VirtualProtect(reinterpret_cast<void*>(rakpeer_hook_loc), 5, old, &old);

	game = *(int*)(*(int*)(replicator + 56) + 56);
	script_context = findFirstClass(game, "ScriptContext");
}

void patch_raiseexception() {
	int pRaiseException = reinterpret_cast<int>(GetProcAddress(GetModuleHandleA("kernelbase.dll"), "RaiseException"));
	DWORD old = 0;
	VirtualProtect(reinterpret_cast<void*>(pRaiseException), 10, 0x40, &old);
	*(uint8_t*)(pRaiseException + 5) = 0x8B;
	*(uint8_t*)(pRaiseException + 6) = 0xE5;
	*(uint8_t*)(pRaiseException + 7) = 0x5D;
	*(uint8_t*)(pRaiseException + 8) = 0xC2;
	*(uint8_t*)(pRaiseException + 9) = 0x10;
	*(uint8_t*)(pRaiseException + 10) = 0x00;
	VirtualProtect(reinterpret_cast<void*>(pRaiseException), 10, old, &old);
}


unsigned long __stdcall init(void*) {
	patch_raiseexception(); // byebye isTainted = true!!!

	DWORD old = 0;
	VirtualProtect(&FreeConsole, 1, 0x40, &old);
	*(uint8_t*)(&FreeConsole) = 0xC3;
	VirtualProtect(&FreeConsole, 1, old, &old);

	AllocConsole();
	freopen("conin$", "r", stdin); // Enable input
	freopen("conout$", "w", stdout); // Display output
	freopen("conout$", "w", stderr); // std error handling
	SetConsoleTitleA("my hacky whacky by static whatic");

	load_addresses();
	int rL = get_lua_state(script_context);
	printf("Lua State: %08X.\n", rL);

	const char* rerubi_source = 
		"013F04674269740667426974733807674269747333320767426974733634046D61" \
		"7468056C646578700667466C6F61740767537472696E6705496E73747205436F6E73" \
		"740550726F746F054C696E6573044E616D650646697273744C054C6173744C065570" \
		"76616C73044172677305566172677305537461636B0556616C756504456E756D0341" \
		"42430341427804417342780B4368756E6B4465636F646506617373657274041B4C75" \
		"61164C75612062797465636F64652065787065637465642E1A4F6E6C79204C756120" \
		"352E3120697320737570706F727465642E056572726F721A496E7465676572207369" \
		"7A65206E6F7420737570706F727465641853697A65742073697A65206E6F74207375" \
		"70706F727465640304080024556E737570706F727465642062797465636F64652074" \
		"617267657420706C6174666F726D0A4765744D65616E696E670123085F5265747572" \
		"6E7304436F6465013F06737472696E6706666F726D61740925733A25733A20257308" \
		"746F737472696E67074F6E4572726F7206756E7061636B046E65787408746F6E756D" \
		"6265722460666F726020696E697469616C2076616C7565206D757374206265206120" \
		"6E756D6265721C60666F7260206C696D6974206D7573742062652061206E756D6265" \
		"721B60666F72602073746570206D7573742062652061206E756D6265720C7365746D" \
		"6574617461626C65075F5F696E6465780A5F5F6E6577696E646578044C6F6F700570" \
		"63616C6C04577261700767657466656E76067265727562690673656C656374046279" \
		"746503737562057072696E740C3D3D3D6C6F616465643D3D3D120B0300001BC00300" \
		"000E020E008C06020078070100B2050607EC0400058C06020078090200780A010026" \
		"08090A95070800B2050607CF0304052105030026040305820402008C040200780501" \
		"00B203040543050303CF0400057D030300040000008C040100820402008C04000082" \
		"0402000102000000000000F03F00011B1B0101000000000000000000000200000200" \
		"00020000000100020000040003000AC0000000FB000000FB010100FB020200FB0302" \
		"009F000402FB02020095010200DE010200820002000102000000000000F03F00020A" \
		"30010000000002000002000900030011C0000000FB000000FB010100FB020200FB04" \
		"0200950304009F000405FB05020095040501DE0402005B0703025B08020343060708" \
		"5B070104430506074304050082040200050200000000000008400200000000000010" \
		"4002000000000000704102000000000000F040020000000000007040000311380100" \
		"0000000002000002000000000000000300010008C0000000FB0200009F0201025B01" \
		"0200FB0200009F02010243000102820002000102000000000000F041000408400100" \
		"0000000000000A00020036C0000000FB0000009F000102FB0100009F0101028C0201" \
		"00FB050100520601008C0701008C0814009F0504025B04050043030400FB04010052" \
		"0501008C0615008C071F009F0404028C06FFFFFB070100520801008C0920009F0703" \
		"02B20506078C0600009A040900060000008C0600009A030300060000005B06050182" \
		"0602008C0401008C02000065000A008C06FF079A040800060000008C0600009A0303" \
		"00060000005B060502820602005B06050382060200A4070600001440805208050078" \
		"0904079F0703023E0903084308020909060708820602000902000000000000F04102" \
		"000000000000000002000000000000F07F02000000000000F8FF0305030604001440" \
		"80020000000000F88F40020000000000003043000736440200010001010000000000" \
		"00030000000001000000000002000001000001000201000200000100000100020005" \
		"0000000000000000000801040022C0010000C60100000E000C00FB020000FB030100" \
		"FB040200FB07020043060700780506009F02040252010200FB03020043020300DE02" \
		"020082010200FB0203009F020102520002008C0200009A0002000200000082000100" \
		"FB020000FB030100FB040200FB07020043060700780506009F02040252010200FB03" \
		"020043020300DE020200820102000102000000000000F03F00082262010201000000" \
		"0000000002000000020000020000000200000000000000020000030010000900D201" \
		"C0000000FF00000000000000FF01000000000000FF02000000000000E2030B003000" \
		"035B00000000300103F001000000300203F102000000FF0400000000000030040301" \
		"03000000FB0400009F040102300403BA04000000FB0401009F040102300403C70500" \
		"0000FB0401009F040102300403F306000000FB0402009F040102300403FB07000000" \
		"FB0402009F040102300403DB08000000FB0402009F040102300403F609000000FB04" \
		"02009F040102300403BD0A0000004D0403BA040000000E040800FB0403004D0503BA" \
		"040000008C0601008C07FEFF9F040402300403BA040000008C060100FB0701009F07" \
		"0102520407008C050100A8043D00FB0704009F070102FB080500520907008C0A0100" \
		"8C0B06009F080402FB0A0600950B080C87090A0BFF0A02000100000030070AEC0D00" \
		"000030080A9D0E000000FB0B0500520C07008C0D07008C0E0E009F0B0400C50A0B00" \
		"010000006F0B0F009A090E000B000000FB0B0500520C07008C0D18008C0E20009F0B" \
		"0402F60B0A01FB0B0500520C07008C0D0F008C0E17009F0B0402F60B0A0265001400" \
		"6F0B10009A0908000B000000FB0B0500520C07008C0D0F008C0E20009F0B0402F60B" \
		"0A0165000A006F0B11009A0908000B000000FB0C0500520D07008C0E0F008C0F2000" \
		"9F0C0402780B0C12F60B0A016A0A00068B04C3FF8C060100FB0701009F0701025204" \
		"07008C050100A8042200FB0702009F070102C60800008C0901009A07090009000000" \
		"FB0902009F0901028C0A00009A0902000A000000A9080001A9080100650011008C09" \
		"03009A07050009000000FB0907009F0901025208090065000A008C0904009A070800" \
		"09000000FB090300FB0A00009F0A01028C0B01008C0CFEFF9F090402520809007809" \
		"060C6A0801098B04DEFF8C060100FB0701009F070102520407008C050100A8040500" \
		"7807060CFB0808009F0801026A0802078B04FBFF4D040301030000008C070100FB08" \
		"01009F080102520508008C060100A8050400FB0804009F0801026A0804078B05FCFF" \
		"8C070100FB0801009F080102520508008C060100A8050700FB0800009F080101FB08" \
		"04009F080101FB0804009F0801018B05F9FF8C070100FB0801009F08010252050800" \
		"8C060100A8050300FB0800009F0801018B05FDFF82030200130309030A030B030C03" \
		"0D030E030F0310031103120313050B000102030405060708090A02000000000000F0" \
		"3F031403150316031703180200000000F0FFFF400019D20176010001000100010000" \
		"00000000040000000100000001000000010000000100000001000000010000000100" \
		"00000300000100000000000000030000000000010001000000000100000100000000" \
		"00030000000000000300000100000000000100000000000001000001000000000000" \
		"0100000100000000000003EDFFFFFF0F160000000000010001020000010000000000" \
		"000001000001000000010000010000000000000300F4FFFFFF0F0F00000000000100" \
		"0000FFFFFFFF0F0500020000000000010000FFFFFFFF0F0400000000000100010001" \
		"00FDFFFFFF0F0600000000000100FFFFFFFF0F0500100104006DC00100008C010100" \
		"C6020000C6030000D9040000FB0000005200000052000100D9050100FB0000005200" \
		"000052000100D906020052000500D907030052000500FB000100D9080400FB000200" \
		"520000005200010052000200D9090500520008005200030052000400FB0002005200" \
		"0500FB000100FB0003005200070052000900A40A010000000040520C08008C0D0400" \
		"9F0C02026F0D0200F10C02000D000000A90B0001A90B01006F0C03009F0A0301A40A" \
		"010000000040520C04009F0C01028C0D5100F10C02000D000000A90B0001A90B0100" \
		"6F0C04009F0A0301520A04009F0A0101520A04009F0A0101520A04009F0A0102520B" \
		"04009F0B01028C0C04009A0A03000C0000005203050065000A008C0C08009A0A0300" \
		"0C0000005203060065000500A40C0600000050406F0D07008C0E02009F0C03018C0C" \
		"04009A0B03000C0000005202050065000A008C0C08009A0B03000C00000052020600" \
		"65000500A40C0600000050406F0D08008C0E02009F0C0301A40C010000000040520E" \
		"08008C0F03009F0E02026F0F0900F10E02000F000000A90D0001A90D01006F0E0A00" \
		"9F0C0301520A09009F0A0100C1000000820A00000B031A0400000040031B031C031D" \
		"031E0400005040031F03200321032206010203040506236D2B010101020000000800" \
		"000008000400001E0000000014000000000000000000550000000000000000000000" \
		"01000000000000000000000200010002000100020000010001000001000200000000" \
		"03000001000100000100020000000003000000000000000000000003000000000300" \
		"01010BA3000000FB0000006F010000DD0200009F000002FF01000001000000DD0200" \
		"00C5010200010000008200030001032400250BEA0101000000000000000000000B02" \
		"010019C0020000FB0400004D0304BA0100000090020300FB0600004D050601030000" \
		"008704050190030402A404050000004040A4050800001C60806F0609005207020052" \
		"080300A4090B000000A040520A00009F0902009F0500028C0600009F040301820001" \
		"000C0326030D0327030C031E04000040400328032904001C6080032A032B040000A0" \
		"40002C19F30101000000010000000002000000000000000000000000000100040302" \
		"0008C0030000FB0300006003020001000000DE010000FB0301006A02030182000100" \
		"00000008830201000001030001000602010007C0020000FB03000087020301130402" \
		"0013050201870304058203020000000007F005010002000000000603010007C00300" \
		"00FB0400008703040113040300130503016A0204058200010000000007F505010002" \
		"0000010010000D008008C0000000C6000000C6010000FB020000FB03010087000203" \
		"4D01009D00000000FB03010095020301DE0201008C0200009A01080002000000FB02" \
		"020013030000FB05020013060001870405066A0402036500E9038C0201009A010800" \
		"02000000FB02020013030000FB05030013060001870405066A0402036500DF038C02" \
		"02009A01120002000000FB02020013030000130500018C0600009A05020006000000" \
		"A9040001A90401006A040203130200028C030000F102D00303000000FB0301009502" \
		"0301DE0201006500CB038C0203009A010A0002000000FB0202001305000013030001" \
		"8C040100A803C303C60600006A0602058B03FDFF6500BF038C0204009A0108000200" \
		"0000FB02020013030000FB05040013060001870405066A0402036500B5038C020500" \
		"9A010A0002000000FB02020013030000FB050500FB07030013080001870607088704" \
		"05066A0402036500A9038C0206009A0111000200000013020002FB0302008C04FF00" \
		"6004050002000000FB04030078050202870204056500010087020302130400001307" \
		"000187060307870506026A050304650096038C0207009A010A0002000000FB020500" \
		"FB0403001305000187030405FB05020013060000870405066A04020365008A038C02" \
		"08009A01080002000000FB02040013030001FB05020013060000870405066A040203" \
		"650080038C0209009A011800020000001302000113030002FB0402008C05FF006005" \
		"050002000000FB050300780602028702050665000100870204028C05FF0060050500" \
		"03000000FB0503007806030287030506650001008703040313060000870504066A03" \
		"0502650066038C020A009A01070002000000FB02020013030000FF04000000000000" \
		"6A04020365005D038C020B009A01130002000000130200001303000113040002FB05" \
		"0200870305038C06FF006006050004000000FB060300780704028704060765000100" \
		"87040504950602016A030506870603046A060502650048038C020C009A0118000200" \
		"00001302000113030002FB0402008C05FF006005050002000000FB05030078060202" \
		"8702050665000100870204028C05FF006005050003000000FB050300780603028703" \
		"0506650001008703040313050000430602036A06040565002E038C020D009A011800" \
		"020000001302000113030002FB0402008C05FF006005050002000000FB0503007806" \
		"02028702050665000100870204028C05FF006005050003000000FB05030078060302" \
		"87030506650001008703040313050000260602036A060405650014038C020E009A01" \
		"1800020000001302000113030002FB0402008C05FF006005050002000000FB050300" \
		"780602028702050665000100870204028C05FF006005050003000000FB0503007806" \
		"030287030506650001008703040313050000090602036A0604056500FA028C020F00" \
		"9A011800020000001302000113030002FB0402008C05FF006005050002000000FB05" \
		"0300780602028702050665000100870204028C05FF006005050003000000FB050300" \
		"7806030287030506650001008703040313050000EC0602036A0604056500E0028C02" \
		"10009A011800020000001302000113030002FB0402008C05FF006005050002000000" \
		"FB050300780602028702050665000100870204028C05FF006005050003000000FB05" \
		"03007806030287030506650001008703040313050000CF0602036A0604056500C602" \
		"8C0211009A011800020000001302000113030002FB0402008C05FF00600505000200" \
		"0000FB050300780602028702050665000100870204028C05FF006005050003000000" \
		"FB0503007806030287030506650001008703040313050000B20602036A0604056500" \
		"AC028C0212009A01090002000000FB02020013030000FB0602001307000187050607" \
		"390405006A0402036500A1028C0213009A01090002000000FB02020013030000FB06" \
		"02001307000187050607560405006A040203650096028C0214009A01090002000000" \
		"FB02020013030000FB06020013070001870506071C0405006A04020365008B028C02" \
		"15009A01100002000000FB020200130300018704020395070301130500028C060100" \
		"A80504005208040087090207730408098B05FCFFFB050200130600006A0405066500" \
		"79028C0216009A01060002000000FB0301001304000143020304DE02010065007102" \
		"8C0217009A01240002000000130300008C0400009A03020004000000A9020001A902" \
		"01001303000113040002FB0502008C06FF006006050003000000FB06030078070302" \
		"8703060765000100870305038C06FF006006050004000000FB060300780704028704" \
		"06076500010087040504F103020004000000A9060001A9060100F106500202000000" \
		"FB07010095060701DE06010065004B028C0218009A01240002000000130300008C04" \
		"00009A03020004000000A9020001A90201001303000113040002FB0502008C06FF00" \
		"6006050003000000FB060300780703028703060765000100870305038C06FF006006" \
		"050004000000FB06030078070402870406076500010087040504B703020004000000" \
		"A9060001A9060100F1062A0202000000FB07010095060701DE060100650025028C02" \
		"19009A01240002000000130300008C0400009A03020004000000A9020001A9020100" \
		"1303000113040002FB0502008C06FF006006050003000000FB060300780703028703" \
		"060765000100870305038C06FF006006050004000000FB0603007807040287040607" \
		"6500010087040504D403020004000000A9060001A9060100F106040202000000FB07" \
		"010095060701DE0601006500FF018C021A009A01120002000000FB05020013060000" \
		"870405065603040056020300130400028C050000F104020005000000A9030001A903" \
		"01009A02F00103000000FB03010095020301DE0201006500EB018C021B009A011600" \
		"02000000FB03020013040001870203045604020056030400130500028C060000F105" \
		"020006000000A9040001A90401009A03050004000000FB04010095030401DE030100" \
		"6500D701FB030200130400006A0203046500D3018C021C009A014800020000001302" \
		"00001303000113040002FB050200C6060000C6070000C6080000C6090000FF060000" \
		"000000008C0A0100F1031E000A0000008C0A0000F10304000A000000430A02037808" \
		"0A0165000100FB0806008C090000950C0201520A08008C0B0100A80A040095090901" \
		"870D050C6A0D06098B0AFCFFFB0A0700870B0502A40C040000003040520D06008C0E" \
		"0100260F08029F0C04009F0B00009F0A000352080A0052070B0065000600FB0A0700" \
		"870B05029F0B01009F0A000352080A0052070B00780A0201DE0A06008C0A0100F104" \
		"9C010A0000008C0A0000F10404000A000000430A020478080A0565000200430A0802" \
		"78080A018C090000520C0200520A08008C0B0100A80A8E0195090901870D07096A0D" \
		"050C8B0AFCFF650089018C021D009A013E00020000001302000013030001FB040200" \
		"C6050000C6060000C60700008C080000FF050000000000008C090100F1031F000900" \
		"00008C090000F103040009000000430902037807090165000100FB070600950B0201" \
		"520907008C0A0100A80905001C0D0500950C0D01870D040B6A0D050C8B09FBFFFF09" \
		"000001000000870A0402A40B040000003040520C05008C0D0100260E07029F0B0400" \
		"9F0A0000C5090A00010000005206090065000700FF09000001000000870A04029F0A" \
		"0100C5090A000100000052060900A409070000006040520A0600C60B000017090300" \
		"600802000C00000052080C00FA09FCFF52090600520A0800820903008C021E009A01" \
		"2000020000001302000013030001FB040200C6050000C6060000C60700008C080100" \
		"9A03020008000000820001008C0800009A03030008000000FB070600650002004308" \
		"020378070805FF060000000000008C050000520A0200520807008C090100A8080400" \
		"95050501870B040A6A0B06058B08FCFF5208060052090500820803008C021F009A01" \
		"21000200000013020000FB030200950502058704030587060302430506046A050302" \
		"8C06000060060C000400000095070201870603077D05170106000000FB0701001308" \
		"000143060708DE060100950602086A05030665000F0195070201870603077D060C01" \
		"05000000FB0701001308000143060708DE060100950602086A050306650004018C02" \
		"20009A012C000200000013020000FB030200A4040A0000009040A4050C000000B040" \
		"870603029F0502026F060D009F0403026A04030295040201A4050A0000009040A406" \
		"0C000000B04095080201870703089F0602026F070E009F0503026A05030495040205" \
		"A4050A0000009040A4060C000000B04095080205870703089F0602026F070F009F05" \
		"03026A050304870503029507020587060307260405066A040302FB05010013060001" \
		"43040506DE0401006500D6008C0221009A012600020000001302000013030002FB04" \
		"020095050205FF06000001000000870704029509020187080409950A02058709040A" \
		"9F070300C5060700010000008C090100520703008C080100A8070500FB0A0200430B" \
		"0509870C06096A0C0A0B8B07FBFF9508020887070408C6080000F107060008000000" \
		"9507020595090208870804096A0804076500B200FB08010095070801DE0701006500" \
		"AE008C0222009A01220002000000130200001303000113040002FB0502008C060000" \
		"9A04090006000000FB07010095060701DE060100FB070000FB080100870607084D04" \
		"06EC10000000780704015B060711870705028C0800009A03030008000000FB080600" \
		"260308028C0A0100520803008C090100A8089000430B060A430D020A870C050D6A0C" \
		"070B8B08FBFF65008A008C0223009A011D000200000013020000FF03000000000000" \
		"8C060100FB0708001C0407008C050100A8047F00FB080800870708068C0A00001C08" \
		"07008C090100A8080C00870B070A130C0B00130D0B01FB0E02009A0C06000E000000" \
		"7D0204000D000000870E0C0D6A0E030DF6030B008B08F4FF8B04EDFF65006B008C02" \
		"24009A01520002000000FB0309001304000187020304FB030200C6040000C6050000" \
		"4D0602FB120000008C070000F1063E0007000000FF04000000000000A40614000000" \
		"3041FF07000000000000E2081700D9090000520004003009086E15000000D9090100" \
		"52000400300908CE160000009F060302520506008C0801004D0602FB120000008C07" \
		"0100A8062200FB0A0000FB0B010087090A0B4D0A099D000000008C0B00009A0A0A00" \
		"0B000000780A0801FF0B000002000000520C0300130D0901C50B0C03010000006A0B" \
		"040A65000D004D0A099D000000008C0B04009A0A09000B000000780A0801FF0B0000" \
		"02000000FB0C0400130D0901C50B0C03010000006A0B040AFB0B0100950A0B01DE0A" \
		"01008B06DEFFFB060800FB0908001C080900950708016A04060713060000FB070A00" \
		"52080200FB090500520A05009F0704026A070306C1040000650017008C0225009A01" \
		"1500020000001302000013030001FB040200FB050B0078060201DE06060052080200" \
		"8C0A0000600A030003000000780903012B090100FB090C00430602098C070100A806" \
		"0400260A08028709050A6A0904088B06FCFF480004FC820001001803150200000000" \
		"0000F03F020000000000007040032D0400003040020000000000000040032E040000" \
		"6040020000000000000840031A0400009040032F040000B040033003310332031402" \
		"00000000000049400310033304000030410334033505021516020B0C3680088C0201" \
		"00030000010001000002000001000000000000010000010000000000000100000100" \
		"00000000000000020000000100000002000001020000000100FFFFFFFF0F00030000" \
		"01000000000000010000010000000000000000010000010102000001000000020300" \
		"00000000010000010000000000000000010000010000000000000100000100010200" \
		"00010000000203000001000000020300000001000001000000000001000001010101" \
		"02020000010000000203000100000100000101010200000100000002030000010000" \
		"00020300000001000001010102000001000000020300000100000002030000000100" \
		"00010101020000010000000203000001000000020300000001000001010102000001" \
		"00000002030000010000000203000000010000010101020000010000000203000001" \
		"00000002030000000100000101010200000100000002030000010000000203000000" \
		"01000001000000000000000100000100000000000000010000010000000000000001" \
		"000001010102000000010000FFFFFFFF0F0400000001000001000000000100000100" \
		"00000000010101020000010000000203000001000000020300000000000100000002" \
		"00000100000000000101010200000100000002030000010000000203000000000001" \
		"00000002000001000000000001010102000001000000020300000100000002030000" \
		"00000001000000020000010000000000000000000000000100000002000001000002" \
		"00000000000000000001000000020000000200000101010101000100020002000001" \
		"0000010000020302000000010200FDFFFFFF0F060000000000000000000000000200" \
		"00000000030002000001000001000002000302000000010200FDFFFFFF0F00060000" \
		"010101010001010200020000010000010000020300000001000000FFFFFFFF0F0400" \
		"000000000000000000000000020000000000000300000000010001FEFFFFFF0F0600" \
		"00010000010101010001020000010100000100020003000102000000010200FDFFFF" \
		"FF0F0600000100000101020001000202000001000000010000000200000300000001" \
		"00000002000003000001010300000000000000000100000000000000000000010000" \
		"00000000000000000200000000020000000001000001010102010000000000000000" \
		"000200000001000000FFFFFFFF0F0400000000010000000002000000020000010101" \
		"01020000010000010000000003000102000001000300000001000000FFFFFFFF0F00" \
		"03000001010002000000000100020000000101010200000000010001F9FFFFFF0FFD" \
		"FFFFFF0F000E00000100000102010200000000010001000000000100000005000000" \
		"00000800000000010000020000000001000000000000000001000000000100000000" \
		"000000030000F7FFFFFF0F0C00000000030000000000000000010000010101000200" \
		"02000000000000000000010000FFFFFFFF0F00050010000A015CA30000008C000100" \
		"8C01FFFFFF02000000000000FB0400006F050100DD0600009F04000278030400FF04" \
		"000000000000FF05000000000000A406030000002040FF07000000000000E2080600" \
		"3004086E04000000D90900005200010052000400300908CE050000009F060302D907" \
		"0100FB0001005200000052000600FB000200FB000300FB00040052000100FB000500" \
		"52000500FB000600FB0007005200020052000300FF08000001000000DD090000C508" \
		"0900010000008C0B0000520903008C0A0100A8091100FB0D08004D0C0DDB07000000" \
		"7D0C09000B000000FB0E08004D0D0EDB07000000260C0B0D950E0B00870D080E6A0D" \
		"020C65000300950D0B00870C080D6A0C060B8B09EFFFA409090000008040520A0700" \
		"9F0902040E090E000E0A0B008C0C0000600C09000B000000A40C0B000000A040520D" \
		"0A008C0E0100520F0B009F0C0400C1000000820C0000C100000082000100FB0C0900" \
		"520D0A00780E00009F0C0301C1000000820001000C02000000000000F03F03240333" \
		"04000020400334033505020405031103370400008040032D040000A040020A0D005C" \
		"FA010200010000000000000200010001000000000000020000000000090000000000" \
		"00000000000000008F04000000000200000001000000000100000000000000020000" \
		"FCFFFFFF0F0800000002010000000100000000000000030002000000020000080303" \
		"0016C00300004D03005B000000004D0400F0010000004D0500F102000000D9060000" \
		"52000000D9070100FB00000052000300520004005200020052000100FB0001005200" \
		"0500FB0002005200000052000600C100000082070200030309030A030B02090E3816" \
		"EE0101000100010002000700000000000000000000000000060102000DC0010000FB" \
		"010000520200009F010202FB02010052030100A4040100000000408C0500009F0402" \
		"009F0200029F020101820001000203390400000040003A0DB3060100000100000000" \
		"0000000100140000014CA3000000A400010000000040A4010400000C2080A4020600" \
		"00142080FF030000260000006F0407006F0508006F0607006F0707006F0807006F09" \
		"08006F0A07006F0B08006F0C07006F0D07006F0E07006F0F07006F1007006F110700" \
		"6F1207006F130700C5030411010000006F0407006F0507006F0607006F0707006F08" \
		"07006F0907006F0A09006F0B07006F0C07006F0D07006F0E07006F0F07006F100700" \
		"6F1107006F1207006F130900C5030411110000006F0409006F0507006F0607006F07" \
		"07006F0808006F090700C503040721000000D9040000D90501005200010052000400" \
		"5200020052000300D906020052000000D9070300520000005200060052000700D908" \
		"04005200050052000700180800420A000000A4080C000000B0406F090D009F080201" \
		"C1000000820001000E033B04000000400328033C04000C2080033D04001420800316" \
		"03170318033A033E040000B040033F050007080F10004C0100000100010001000100" \
		"00000100000001000000010000000000010000000100000001000000010000000000" \
		"01000000010000000D1000000000BF010004000000C5040000000005000000020000" \
		"11";

	int rerubi_size = lstrlenA(rerubi_source) / 2;
	uint8_t* rerubi_bytecode = new uint8_t[rerubi_size];
	for (int i = 0, j = 0; i < lstrlenA(rerubi_source); i += 2) {
		char c[2];
		c[0] = rerubi_source[i + 0];
		c[1] = rerubi_source[i + 1];
		rerubi_bytecode[j++] = to_hex(c);
	}

	rL = r_newthread(rL);
	if (r_deserialize(rL, "@Rerubi", (const char*)rerubi_bytecode, rerubi_size) == 0) {
		printf("loaded\n\n");
		r_spawn(rL);
		Sleep(250);
		L = luaL_newstate();
		luaL_openlibs(L);
	} else {
		printf("Failed to invoke deserializer\n");
		system("PAUSE");
		return 0;
	}

	// Here we have it folks, place your script here
	// Add a UI to this, do whatever you want.
	std::string script;
input:
	script = "";
	std::cout << "Enter a script: ";
	std::getline(std::cin, script);
	r_loadstring(rL, script);
	
	Sleep(500);
	system("CLS");
	goto input;

	system("PAUSE");
	return 0;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved){
	switch (ul_reason_for_call) {
		case DLL_PROCESS_ATTACH:
			CreateThread(0, 0, init, 0, 0, 0);
			break;
		case DLL_THREAD_ATTACH:
		case DLL_THREAD_DETACH:
		case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}
